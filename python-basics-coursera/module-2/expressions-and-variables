{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Variables:\n",
    "Represent data stored as strings, tuples, dictionaries, lists, and ojects\n",
    "\n",
    "# Keywords:\n",
    "Special words that are reserved for specific purposes and that can only be used for those purposes\n",
    "\n",
    "in, not, or, for, while, return\n",
    "\n",
    "# Operators:\n",
    "+, /, -, *, **, %, //, >, <, ==\n",
    "\n",
    "# Expressions:\n",
    "A combination of numbers, symbols, and variables to compute and return a result upon evaluation\n",
    "\n",
    "# Functions:\n",
    "A group of related statements to preform a task and return a value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23.88888888888889"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def to_celsius(x):\n",
    "    # Convert Fahrenheit to Celsius\n",
    "    return (x-32) * 5/9\n",
    "\n",
    "to_celsius(75)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conditional statements:\n",
    "Sections of code that direct program execution based on specified conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number is negative.\n"
     ]
    }
   ],
   "source": [
    "number = -4\n",
    "\n",
    "if number > 0:\n",
    "    print('Number is positive.')\n",
    "elif number == 0:\n",
    "    print('Number is zero.')\n",
    "else:\n",
    "    print('Number is negative.')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Naming rules and conventions\n",
    "- names cannot contain spaces\n",
    "- names may be a mixture of upper and lower case characters\n",
    "- names can't start with a number but may contain numbers after the first character\n",
    "- variable names and function names should be written in snake_case\n",
    "- descriptive names are better than cryptic abbreviations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
